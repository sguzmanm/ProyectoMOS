!************************************************************************************************
! Problema: 
!
! Descripción del problema.
 
! Parámetros:

! Constantes
! Conjuntos
! Vectores
!***********************************************************************************************

model Proyecto
 uses "mmxprs"

 forward function getProblemStatus(status: integer): string
 
  forward function f(val: integer): integer
  
  forward function score (index:integer):real

!DECLARACIONES Y PARAMETROS-------------------------------------------------------------------------------

 declarations
 	!constants
 	mind=1
 	maxd=1
 	s=1
 	d=4
 	
 	n=4
 	p1=1
 	p2=0
 	
 	!Number of cities
 	A=1..n
 	!Number of days plus 1
 	B=0..d
 	!Restriction for the ratings and scores
 	E=1..(2*maxd)
 	!Second restriction for the ratings and scores
 	F=1..(2*maxd-1)
 	x: array(A,A,B) of mpvar
 	!Decision variable
 	t: array(A) of integer
 	!Array and matrix params 
 	S: array (A,E) of real
 	R: array (A,E) of real
 	C: array (A,A) of real
 	D: array(A) of real
 	
 end-declarations
 
 
 !Values for variables. Should be from some specified file
 S::[1,1,1,1,
 		1,1,1,1]
 R::[1,1,1,1,
 	1,1,1,1]
 C::[1,1,1,1,
 		1,1,1,1,
 		1,1,1,1,
 		1,1,1,1]
 D::[1,1,1,1]
 
 
  !GOAL FUNCTION AND RESTRICTIONS-------------------------------------------------------------------------
  !objective functions
  Satisfaction:=sum(i in A, j in A, k in B) p1*f(x(i,j,k)*score(j)+p2/(f(x(i,j,k))*(C(i,j)*D(j))
  !Restrictions
  !Domain restrictions
  
  !C
  forall(i in A, j in A)
  	C(i,j)>=0
  !D
  forall(i in A) 
  	D(i) >=0
  !S
  forall(i in A, j in E)
  	(S(i,j)>=1 and S(i,j)<=5)
  forall(i in A, j in E)
  	(S(i,j)>=S(i,j+1)and S(i,2*maxd)<=S(i,j))
  !R
  forall(i in A, j in E)
  	(R(i,j)>=0)
  forall(i in A, j in E)
  	(R(i,j)>=R(i,j+1)and R(i,2*maxd)<=S(i,j))
  !pi
  p1+p2=1
  0<=p1<=1
  0<=p2<=1
  
  !Problem restrictions
  forall(i in A, j in A)
  	(mind<=sum(k in B)x(i,j,k)<=maxd)
  
  forall(i in A, k in B)
  	sum(z in A)f(x(i,z,k))=1
  		
  forall(i in A, k in B) 
  	x(i,i,k)=0
  
  forall(i in A, j in A, k in B)
  	sum(z in A) f(x(j,z,(x(i,j,k)+k))=1
  
  x(s,s,0)>0 
  	
 minimize(Satisfaction)
 
 !RESULTADOS------------------------------------------------------------------------------------------------
  
  !Impresión del reporte
  writeln("Solución del Problema")
  writeln("Status    : ", getProblemStatus(getprobstat))
  writeln("Costo total: ", getobjval) !Nosotros optimizamos el cuadrado de la distancia, por eso es necesario hacer el ajuste
     
  forall(i in A, j in A, k in B| getsol(x(i,j,k))>0) do
	 writeln( "Quédese "+getsol(x(i))+" días cuando salió de la ciudad "+i+" a la ciudad "+j+" en el día "+k )
  end-do
  
    
function getProblemStatus(status: integer):string
   case status of
	    XPRS_OPT: returned := "Solved to optimality."
	    XPRS_UNF: returned := "Unfinished"
	    XPRS_INF: returned := "Infeasible"
	    XPRS_UNB: returned := "Unbounded"
    else returned:= "Unknown Status"
   end-case
end-function
  
end-model

